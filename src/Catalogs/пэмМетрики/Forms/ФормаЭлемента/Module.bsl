&НаКлиенте
Процедура МетодПолученияМетрикиПриИзменении(Элемент)
	
	ПерсональноеРасписание = Ложь;
	ПараметрыРегламентногоЗадания.Предопределенное = НЕ ПерсональноеРасписание;
	ПодключитьОбработчикОжидания("ОбновитьСостояниеФормы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МаскаИмениМетрики = "[a-zA-Z_:][a-zA-Z0-9_:]*";
	
	Результат = пэмМетрикиСервер.ПроверитьСтрокуНаСоответствиеМаске(Объект.Код,МаскаИмениМетрики);
	Если Результат.ЕстьОшибка Тогда
		Отказ = Истина;
		Сообщить("Имя метрики не соответствует маске: " + МаскаИмениМетрики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсональноеРасписаниеПриИзменении(Элемент)
	
	ПараметрыРегламентногоЗадания.Предопределенное = НЕ ПерсональноеРасписание;
	Если ПерсональноеРасписание Тогда
		ПараметрыРегламентногоЗадания.Использование = Истина;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьСостояниеФормы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуАлгоритмаРасчетаНаСервере()
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Перед выполнением проверки объект необходимо записать!");
		Возврат;
	КонецЕсли; 
	
	сткВозврат = пэмМетрикиСервер.СформироватьМетрику(Объект.Алгоритм);
	Если сткВозврат.Ошибка Тогда
		
		Сообщить("Процесс проверки расчета завершен с ошибкой на этапе расчета.
		|Описание ошибки:" +
		Символы.ПС + сткВозврат.ОписаниеОшибки);
		
		Возврат;
		
	КонецЕсли;
	           		
	сткВозврат = пэмМетрикиСервер.ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(Объект.Код, Объект.ТипМетрики, сткВозврат.МетрикаТаблицей);
	
	Если сткВозврат.Ошибка Тогда
		
		Сообщить("Процесс проверки расчета завершен с ошибкой на этапе преобразования.
		||Итоговая метрика:" +
		Символы.ПС + сткВозврат.МетрикаСтрокой + " 
		|Описание ошибки:" +
		Символы.ПС + сткВозврат.ОписаниеОшибки);
		
		Возврат;

	КонецЕсли; 
	
	Сообщить("Проверка алгоритма расчета завершена.
			 |Итоговая метрика:" +
			 Символы.ПС + сткВозврат.МетрикаСтрокой);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуАлгоритма(Команда)
	
	ВыполнитьПроверкуАлгоритмаРасчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Алгоритм = 	"
		|//В результате работы алгоритма должна получиться таблица значений с именем ""ТаблицаЗначений""
		|//Обязательным является наличие колонки ""value""
		|//В случае необходимости можно добавить дополнительные колонки, выполняющие фунции разделителей метрик
		|//Имена колонок должны состоять только из латинских символов
		|//Тип содержимого колонки ""value"" - ""Число""
		|//Тип содержимого остальных колонок - ""Строка""
		|
		|//Пример:		|
		|ТаблицаЗначений = Новый ТаблицаЗначений;
		|ТаблицаЗначений.Колонки.Добавить(""label"", Новый ОписаниеТипов(""Строка""));
		|ТаблицаЗначений.Колонки.Добавить(""value"", Новый ОписаниеТипов(""Число""));
		|
		|ГСЧ = Новый ГенераторСлучайныхЧисел();
		|
		|НоваяСтрока = ТаблицаЗначений.добавить();
		|НоваяСтрока.label = ""Показатель_1"";
		|НоваяСтрока.value = 	ГСЧ.СлучайноеЧисло(0,100);
		|
		|НоваяСтрока = ТаблицаЗначений.добавить();
		|НоваяСтрока.label = ""Показатель_2"";
		|НоваяСтрока.value = ГСЧ.СлучайноеЧисло(0,50);";
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьСостояниеФормы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеФормы() Экспорт
	
	КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPullRed;
	ПерсональноеРасписание = НЕ ПараметрыРегламентногоЗадания.Предопределенное;
	
	Если Объект.МетодПолученияМетрики = ПредопределенноеЗначение("Перечисление.пэмМетодыПолученияМетрик.Pull") Тогда
		Если Объект.Активность Тогда
			КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPullGreen;
		Иначе
			КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPullRed;
		КонецЕсли;
		ДоступенВыборПерсональногоРасписания = Ложь;
		ПредставлениеРасписания = НСтр("ru = 'Расписание доставки определяется настройками Prometheus'");
	Иначе
		Если Объект.Активность И ПараметрыРегламентногоЗадания.Использование И пэмМетрикиВызовСервера.РазрешеноИспользованиеМетодаPush() Тогда
			КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPushGreen;			
		Иначе	
			КартинкаСостояниеМетодаДоставки = БиблиотекаКартинок.пэмPushRed;
		КонецЕсли;
		ПредставлениеРасписания = пэмМетрикиКлиент.ПолучитьПредставлениеРасписания(ПараметрыРегламентногоЗадания);
		ДоступенВыборПерсональногоРасписания = Истина;
	КонецЕсли;
	
	Элементы.ОписаниеМетодаДоставкиМетрики.Заголовок = ПредставлениеРасписания;
	Элементы.ПерсональноеРасписание.Доступность = ДоступенВыборПерсональногоРасписания;
	Элементы.СостояниеМетодаДоставки.Картинка = КартинкаСостояниеМетодаДоставки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеМетодаДоставкиМетрикиНажатие(Элемент)
	
	Если ПараметрыРегламентногоЗадания.Предопределенное Тогда
		ОткрытьФорму("ОбщаяФорма.пэмНастройкиМетрик");	
	Иначе
		пэмМетрикиКлиент.ОбработатьИзменениеРасписания(ПараметрыРегламентногоЗадания, ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура АктивностьПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСостояниеФормы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПараметрыРегламентногоЗадания = пэмМетрикиСервер.ПолучитьПараметрыРегламентногоЗадания(Объект.ИдентификаторРегламента);
	 	 					
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если ПараметрыРегламентногоЗадания.Предопределенное Тогда	
		ПараметрыРегламентногоЗадания.Наименование = Метаданные.РегламентныеЗадания.пэмВыполнитьРасчетМетрик.Наименование;
		ПараметрыРегламентногоЗадания.Ключ = Метаданные.РегламентныеЗадания.пэмВыполнитьРасчетМетрик.Ключ;	
		ПараметрыРегламентногоЗадания.Параметры = Неопределено;
	Иначе
		НаименованиеРегламента = Метаданные.РегламентныеЗадания.пэмВыполнитьРасчетМетрик.Наименование;
		НаименованиеРегламента = СтрЗаменить(НаименованиеРегламента,"(Общий регламент)","(Метрика: " + ТекущийОбъект.Код + ")");
		ПараметрыРегламентногоЗадания.Наименование = НаименованиеРегламента;
		
		КлючРегламента = Метаданные.РегламентныеЗадания.пэмВыполнитьРасчетМетрик.Ключ + " " + ТекущийОбъект.Код;
		ПараметрыРегламентногоЗадания.Ключ = КлючРегламента;
		
		ПараметрыРегламента = Новый Массив;
		ПараметрыРегламента.Добавить(ТекущийОбъект.Код);
		ПараметрыРегламентногоЗадания.Параметры = ПараметрыРегламента;
		
		ПараметрыРегламентногоЗадания.Использование = ТекущийОбъект.Активность;
	КонецЕсли;
		      		
	пэмМетрикиСервер.ОбновитьРегламентноеЗадание(ПараметрыРегламентногоЗадания);
	ТекущийОбъект.ИдентификаторРегламента = ПараметрыРегламентногоЗадания.УникальныйИдентификатор;
	
КонецПроцедуры